
#include "cbase.h"

static unsigned char g_Script_vscript_server[] = {
"//========== Copyright ? 2008, Valve Corporation, All rights reserved. ========\n"
"//\n"
"// Purpose:\n"
"//\n"
"//=============================================================================\n"
"\n"
"function UniqueString(string = \"\")\n"
"{\n"
"	return DoUniqueString(string.tostring()); \n"
"}	\n"
"\n"
"function EntFire(target, action, value = null, delay = 0.0, activator = null)\n"
"{\n"
"	if (!value)\n"
"	{\n"
"		value = \"\";\n"
"	}\n"
"\n"
"	local caller = null;\n"
"	if (\"self\" in this)\n"
"	{\n"
"		caller = self;\n"
"		if (!activator)\n"
"		{\n"
"			activator = self;\n"
"		}\n"
"	}\n"
"\n"
"	DoEntFire(target.tostring(), action.tostring(), value.tostring(), delay, activator, caller);\n"
"}\n"
"\n"
"function __ReplaceClosures(script, scope)\n"
"{\n"
"	if (!scope)\n"
"	{\n"
"		scope = getroottable();\n"
"	}\n"
"\n"
"	local tempParent = { getroottable = function() { return null; } };\n"
"	local temp = { runscript = script };\n"
"	delegate tempParent : temp;\n"
"\n"
"	temp.runscript()\n"
"	foreach(key, val in temp)\n"
"	{\n"
"		if (typeof(val) == \"function\" && key != \"runscript\")\n"
"		{\n"
"			printl(\"   Replacing \" + key);\n"
"			scope[key] <-val; \n"
"		}\n"
"	}\n"
"}\n"
"\n"
"/*\n"
"UNDONE FOR PORTAL2 BRANCH:\n"
"We're not using the auto-connecting of outputs, always calling ConnectOuput explicitly in our scripts.\n"
"The regexp object doesn't save/load properly and causes a crash when used to match after a save/load.\n"
"Instead of fixing this, we're disabling the feature. If this class of problem comes up more we might\n"
"revisit, otherwise we'll leave if off and broken.\n"
""
"__OutputsPattern <- regexp(\"^On.*Output$\");\n"
"\n"
"function ConnectOutputs( table )\n"
"{\n"
"	const nCharsToStrip = 6;\n"
"	foreach( key, val in table )\n"
"	{\n"
"		if ( typeof( val ) == \"function\" && __OutputsPattern.match( key ) )\n"
"		{\n"
"			table.self.ConnectOutput( key.slice( 0, key.len() - nCharsToStrip ), key );\n"
"		}\n"
"	}\n"
"}\n"
"\n"
"*/\n"
"\n"
"function IncludeScript(name, scope = null)\n"
"{\n"
"	if (scope == null)\n"
"	{\n"
"		scope = this;\n"
"	}\n"
"	return ::DoIncludeScript(name, scope);\n"
"}\n"
"\n"
"//---------------------------------------------------------\n"
"// Text dump this scope's contents to the console.\n"
"//---------------------------------------------------------\n"
"function __DumpScope(depth, table)\n"
"{\n"
"	local indent = function(count)\n"
"	{\n"
"		local i; \n"
"		for (i = 0; i < count; i++)\n"
"		{\n"
"			print(\"   \"); \n"
"		}\n"
"	}\n"
"\n"
"	foreach(key, value in table)\n"
"	{\n"
"		indent(depth);\n"
"		print(key);\n"
"		switch (type(value))\n"
"		{\n"
"		case \"table\":\n"
"			print(\"(TABLE)\\n\");\n"
"			indent(depth);\n"
"			print(\"{\\n\");\n"
"			__DumpScope(depth + 1, value);\n"
"			indent(depth);\n"
"			print(\"}\");\n"
"			break;\n"
"		case \"array\":\n"
"			print(\"(ARRAY)\\n\");\n"
"			indent(depth);\n"
"			print(\"[\\n\")\n"
"			__DumpScope(depth + 1, value); \n"
"			indent(depth);\n"
"			print(\"]\");\n"
"			break; \n"
"       case \"string\":\n"
"			print(\" = \\\"\");\n"
"			print(value);\n"
"			print(\"\\\"\"); \n"
"			break; \n"
"		default:\n"
"			print(\" = \");\n"
"			print(value); \n"
"			break; \n"
"		}\n"
"		print(\"\\n\");\n"
"	}\n"
"}\n"
};